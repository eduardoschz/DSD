// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2018 22:15:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    matrix
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module matrix_vlg_sample_tst(
	clk,
	Q1,
	Q2,
	Q3,
	rst,
	sampler_tx
);
input  clk;
input [2:0] Q1;
input [2:0] Q2;
input [10:0] Q3;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Q1 or Q2 or Q3 or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module matrix_vlg_check_tst (
	COL,
	Q1,
	Q2,
	Q3,
	REN,
	sampler_rx
);
input [7:0] COL;
input [2:0] Q1;
input [2:0] Q2;
input [10:0] Q3;
input [7:0] REN;
input sampler_rx;

reg [7:0] COL_expected;
reg [2:0] Q1_expected;
reg [2:0] Q2_expected;
reg [10:0] Q3_expected;
reg [7:0] REN_expected;

reg [7:0] COL_prev;
reg [2:0] Q1_prev;
reg [2:0] Q2_prev;
reg [10:0] Q3_prev;
reg [7:0] REN_prev;

reg [7:0] COL_expected_prev;
reg [2:0] Q1_expected_prev;
reg [2:0] Q2_expected_prev;
reg [10:0] Q3_expected_prev;
reg [7:0] REN_expected_prev;

reg [7:0] last_COL_exp;
reg [2:0] last_Q1_exp;
reg [2:0] last_Q2_exp;
reg [10:0] last_Q3_exp;
reg [7:0] last_REN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	COL_prev = COL;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	REN_prev = REN;
end

// update expected /o prevs

always @(trigger)
begin
	COL_expected_prev = COL_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	REN_expected_prev = REN_expected;
end


// expected COL[ 7 ]
initial
begin
	COL_expected[7] = 1'bX;
end 
// expected COL[ 6 ]
initial
begin
	COL_expected[6] = 1'bX;
end 
// expected COL[ 5 ]
initial
begin
	COL_expected[5] = 1'bX;
end 
// expected COL[ 4 ]
initial
begin
	COL_expected[4] = 1'bX;
end 
// expected COL[ 3 ]
initial
begin
	COL_expected[3] = 1'bX;
end 
// expected COL[ 2 ]
initial
begin
	COL_expected[2] = 1'bX;
end 
// expected COL[ 1 ]
initial
begin
	COL_expected[1] = 1'bX;
end 
// expected COL[ 0 ]
initial
begin
	COL_expected[0] = 1'bX;
end 
// expected REN[ 7 ]
initial
begin
	REN_expected[7] = 1'bX;
end 
// expected REN[ 6 ]
initial
begin
	REN_expected[6] = 1'bX;
end 
// expected REN[ 5 ]
initial
begin
	REN_expected[5] = 1'bX;
end 
// expected REN[ 4 ]
initial
begin
	REN_expected[4] = 1'bX;
end 
// expected REN[ 3 ]
initial
begin
	REN_expected[3] = 1'bX;
end 
// expected REN[ 2 ]
initial
begin
	REN_expected[2] = 1'bX;
end 
// expected REN[ 1 ]
initial
begin
	REN_expected[1] = 1'bX;
end 
// expected REN[ 0 ]
initial
begin
	REN_expected[0] = 1'bX;
end 
// generate trigger
always @(COL_expected or COL or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or REN_expected or REN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected COL = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected REN = %b | ",COL_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,REN_expected_prev);
	$display("| real COL = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real REN = %b | ",COL_prev,Q1_prev,Q2_prev,Q3_prev,REN_prev);
`endif
	if (
		( COL_expected_prev[0] !== 1'bx ) && ( COL_prev[0] !== COL_expected_prev[0] )
		&& ((COL_expected_prev[0] !== last_COL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[0] = COL_expected_prev[0];
	end
	if (
		( COL_expected_prev[1] !== 1'bx ) && ( COL_prev[1] !== COL_expected_prev[1] )
		&& ((COL_expected_prev[1] !== last_COL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[1] = COL_expected_prev[1];
	end
	if (
		( COL_expected_prev[2] !== 1'bx ) && ( COL_prev[2] !== COL_expected_prev[2] )
		&& ((COL_expected_prev[2] !== last_COL_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[2] = COL_expected_prev[2];
	end
	if (
		( COL_expected_prev[3] !== 1'bx ) && ( COL_prev[3] !== COL_expected_prev[3] )
		&& ((COL_expected_prev[3] !== last_COL_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[3] = COL_expected_prev[3];
	end
	if (
		( COL_expected_prev[4] !== 1'bx ) && ( COL_prev[4] !== COL_expected_prev[4] )
		&& ((COL_expected_prev[4] !== last_COL_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[4] = COL_expected_prev[4];
	end
	if (
		( COL_expected_prev[5] !== 1'bx ) && ( COL_prev[5] !== COL_expected_prev[5] )
		&& ((COL_expected_prev[5] !== last_COL_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[5] = COL_expected_prev[5];
	end
	if (
		( COL_expected_prev[6] !== 1'bx ) && ( COL_prev[6] !== COL_expected_prev[6] )
		&& ((COL_expected_prev[6] !== last_COL_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[6] = COL_expected_prev[6];
	end
	if (
		( COL_expected_prev[7] !== 1'bx ) && ( COL_prev[7] !== COL_expected_prev[7] )
		&& ((COL_expected_prev[7] !== last_COL_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COL[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COL_expected_prev);
		$display ("     Real value = %b", COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COL_exp[7] = COL_expected_prev[7];
	end
	if (
		( Q1_expected_prev[0] !== 1'bx ) && ( Q1_prev[0] !== Q1_expected_prev[0] )
		&& ((Q1_expected_prev[0] !== last_Q1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q1_exp[0] = Q1_expected_prev[0];
	end
	if (
		( Q1_expected_prev[1] !== 1'bx ) && ( Q1_prev[1] !== Q1_expected_prev[1] )
		&& ((Q1_expected_prev[1] !== last_Q1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q1_exp[1] = Q1_expected_prev[1];
	end
	if (
		( Q1_expected_prev[2] !== 1'bx ) && ( Q1_prev[2] !== Q1_expected_prev[2] )
		&& ((Q1_expected_prev[2] !== last_Q1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q1_exp[2] = Q1_expected_prev[2];
	end
	if (
		( Q2_expected_prev[0] !== 1'bx ) && ( Q2_prev[0] !== Q2_expected_prev[0] )
		&& ((Q2_expected_prev[0] !== last_Q2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q2_exp[0] = Q2_expected_prev[0];
	end
	if (
		( Q2_expected_prev[1] !== 1'bx ) && ( Q2_prev[1] !== Q2_expected_prev[1] )
		&& ((Q2_expected_prev[1] !== last_Q2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q2_exp[1] = Q2_expected_prev[1];
	end
	if (
		( Q2_expected_prev[2] !== 1'bx ) && ( Q2_prev[2] !== Q2_expected_prev[2] )
		&& ((Q2_expected_prev[2] !== last_Q2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q2_exp[2] = Q2_expected_prev[2];
	end
	if (
		( Q3_expected_prev[0] !== 1'bx ) && ( Q3_prev[0] !== Q3_expected_prev[0] )
		&& ((Q3_expected_prev[0] !== last_Q3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[0] = Q3_expected_prev[0];
	end
	if (
		( Q3_expected_prev[1] !== 1'bx ) && ( Q3_prev[1] !== Q3_expected_prev[1] )
		&& ((Q3_expected_prev[1] !== last_Q3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[1] = Q3_expected_prev[1];
	end
	if (
		( Q3_expected_prev[2] !== 1'bx ) && ( Q3_prev[2] !== Q3_expected_prev[2] )
		&& ((Q3_expected_prev[2] !== last_Q3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[2] = Q3_expected_prev[2];
	end
	if (
		( Q3_expected_prev[3] !== 1'bx ) && ( Q3_prev[3] !== Q3_expected_prev[3] )
		&& ((Q3_expected_prev[3] !== last_Q3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[3] = Q3_expected_prev[3];
	end
	if (
		( Q3_expected_prev[4] !== 1'bx ) && ( Q3_prev[4] !== Q3_expected_prev[4] )
		&& ((Q3_expected_prev[4] !== last_Q3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[4] = Q3_expected_prev[4];
	end
	if (
		( Q3_expected_prev[5] !== 1'bx ) && ( Q3_prev[5] !== Q3_expected_prev[5] )
		&& ((Q3_expected_prev[5] !== last_Q3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[5] = Q3_expected_prev[5];
	end
	if (
		( Q3_expected_prev[6] !== 1'bx ) && ( Q3_prev[6] !== Q3_expected_prev[6] )
		&& ((Q3_expected_prev[6] !== last_Q3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[6] = Q3_expected_prev[6];
	end
	if (
		( Q3_expected_prev[7] !== 1'bx ) && ( Q3_prev[7] !== Q3_expected_prev[7] )
		&& ((Q3_expected_prev[7] !== last_Q3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[7] = Q3_expected_prev[7];
	end
	if (
		( Q3_expected_prev[8] !== 1'bx ) && ( Q3_prev[8] !== Q3_expected_prev[8] )
		&& ((Q3_expected_prev[8] !== last_Q3_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[8] = Q3_expected_prev[8];
	end
	if (
		( Q3_expected_prev[9] !== 1'bx ) && ( Q3_prev[9] !== Q3_expected_prev[9] )
		&& ((Q3_expected_prev[9] !== last_Q3_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[9] = Q3_expected_prev[9];
	end
	if (
		( Q3_expected_prev[10] !== 1'bx ) && ( Q3_prev[10] !== Q3_expected_prev[10] )
		&& ((Q3_expected_prev[10] !== last_Q3_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q3_exp[10] = Q3_expected_prev[10];
	end
	if (
		( REN_expected_prev[0] !== 1'bx ) && ( REN_prev[0] !== REN_expected_prev[0] )
		&& ((REN_expected_prev[0] !== last_REN_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[0] = REN_expected_prev[0];
	end
	if (
		( REN_expected_prev[1] !== 1'bx ) && ( REN_prev[1] !== REN_expected_prev[1] )
		&& ((REN_expected_prev[1] !== last_REN_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[1] = REN_expected_prev[1];
	end
	if (
		( REN_expected_prev[2] !== 1'bx ) && ( REN_prev[2] !== REN_expected_prev[2] )
		&& ((REN_expected_prev[2] !== last_REN_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[2] = REN_expected_prev[2];
	end
	if (
		( REN_expected_prev[3] !== 1'bx ) && ( REN_prev[3] !== REN_expected_prev[3] )
		&& ((REN_expected_prev[3] !== last_REN_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[3] = REN_expected_prev[3];
	end
	if (
		( REN_expected_prev[4] !== 1'bx ) && ( REN_prev[4] !== REN_expected_prev[4] )
		&& ((REN_expected_prev[4] !== last_REN_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[4] = REN_expected_prev[4];
	end
	if (
		( REN_expected_prev[5] !== 1'bx ) && ( REN_prev[5] !== REN_expected_prev[5] )
		&& ((REN_expected_prev[5] !== last_REN_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[5] = REN_expected_prev[5];
	end
	if (
		( REN_expected_prev[6] !== 1'bx ) && ( REN_prev[6] !== REN_expected_prev[6] )
		&& ((REN_expected_prev[6] !== last_REN_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[6] = REN_expected_prev[6];
	end
	if (
		( REN_expected_prev[7] !== 1'bx ) && ( REN_prev[7] !== REN_expected_prev[7] )
		&& ((REN_expected_prev[7] !== last_REN_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REN_expected_prev);
		$display ("     Real value = %b", REN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REN_exp[7] = REN_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module matrix_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] treg_Q1;
reg [2:0] treg_Q2;
reg [10:0] treg_Q3;
reg rst;
// wires                                               
wire [7:0] COL;
wire [2:0] Q1;
wire [2:0] Q2;
wire [10:0] Q3;
wire [7:0] REN;

wire sampler;                             

// assign statements (if any)                          
assign Q1 = treg_Q1;
assign Q2 = treg_Q2;
assign Q3 = treg_Q3;
matrix i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.COL(COL),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.REN(REN),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 
// Q1[ 2 ]
initial
begin
	treg_Q1[2] = 1'bZ;
end 
// Q1[ 1 ]
initial
begin
	treg_Q1[1] = 1'bZ;
end 
// Q1[ 0 ]
initial
begin
	treg_Q1[0] = 1'bZ;
end 
// Q2[ 2 ]
initial
begin
	treg_Q2[2] = 1'bZ;
end 
// Q2[ 1 ]
initial
begin
	treg_Q2[1] = 1'bZ;
end 
// Q2[ 0 ]
initial
begin
	treg_Q2[0] = 1'bZ;
end 
// Q3[ 10 ]
initial
begin
	treg_Q3[10] = 1'bZ;
end 
// Q3[ 9 ]
initial
begin
	treg_Q3[9] = 1'bZ;
end 
// Q3[ 8 ]
initial
begin
	treg_Q3[8] = 1'bZ;
end 
// Q3[ 7 ]
initial
begin
	treg_Q3[7] = 1'bZ;
end 
// Q3[ 6 ]
initial
begin
	treg_Q3[6] = 1'bZ;
end 
// Q3[ 5 ]
initial
begin
	treg_Q3[5] = 1'bZ;
end 
// Q3[ 4 ]
initial
begin
	treg_Q3[4] = 1'bZ;
end 
// Q3[ 3 ]
initial
begin
	treg_Q3[3] = 1'bZ;
end 
// Q3[ 2 ]
initial
begin
	treg_Q3[2] = 1'bZ;
end 
// Q3[ 1 ]
initial
begin
	treg_Q3[1] = 1'bZ;
end 
// Q3[ 0 ]
initial
begin
	treg_Q3[0] = 1'bZ;
end 

matrix_vlg_sample_tst tb_sample (
	.clk(clk),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.rst(rst),
	.sampler_tx(sampler)
);

matrix_vlg_check_tst tb_out(
	.COL(COL),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.REN(REN),
	.sampler_rx(sampler)
);
endmodule

